#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;

# see README.mkd and TODO for more info

use MIME::Base64;
use Digest::SHA qw(sha256 hmac_sha256 hmac_sha256_base64);

# ----------------------------------------------------------------------

my $N  = 1_000_000;                            # ROMix iterations
my $sl = "$ENV{HOME}/.config/hap2.sitelist";

# other non-parametrised settings:
# - SHA256 as H in ROMix
# - unpack("L") as "Integerify" in ROMix

# ----------------------------------------------------------------------

# get site nickname from command line
my $sn = shift;
die "need site nickname\n" unless $sn;

# get site details from sitelist file
my %sd = read_sl($sn);
die unless $sd{site};
die unless $sd{user};
$sd{salt} ||= 1;

# create the internal salt, to be used in the hap2() function
my $ss = "$sd{user}+$sd{salt}\@$sd{site}";
# TODO: read maxlen, special, UC/lc, and other constraints

print "\nmaster password: ";
my $mp = read_s();
die "need master password\n" unless $mp;

say hap2( $ss, $mp );

# ----------------------------------------------------------------------

sub hap2 {
    my ( $ss, $mp ) = @_;
    t_start();

    # convert to 256 bits :-)
    my $salt = sha256($ss);
    # everything is in 256 bits from now on

    # step 1 -- hmac with the master password
    my $h1   = hmac_sha256( $salt, $mp );
    my $h2   = ROMix($h1);
    my $h3   = hmac_sha256_base64( $salt, $h2 );
    print STDERR t_lap() . "\n";
    return $h3;
}

# ----------------------------------------------------------------------

sub ROMix {
    my $in = shift;
    my ( $X, $i, @V, $j );

    $V[0] = $in;
    for ( $i = 1; $i <= $N; $i++ ) {
        $V[$i] = sha256( $V[ $i - 1 ] );
    }
    $X = $V[$N];
    print STDERR t_lap() . "\n";

    for ( $i = 1; $i <= $N; $i++ ) {
        $j = unpack( "L", $X ) % $N;
        $X = sha256( $X ^ $V[$j] );
    }

    return $X;
}

# ----------------------------------------------------------------------

# service routines

sub read_sl {
    my $sn = shift;
    my %h;

    local @ARGV = ($sl);
    while (<>) {
        next unless /^(?=\S)($sn)/ .. /^$/;

        print;
        s/#.*//;
        next unless /^\s+(\S+)\s*=\s*(.*)/;
        die "\nWARNING: duplicate entry for '$1'\n\t'$2' overrides '$h{$1}'\n" if $h{$1};
        $h{$1} = $2;
    }

    return %h;
}

# this is much better than fiddling with hard-to-use modules like
# Term::ReadLine or installing non-core modules like Term::ReadKey.  I've
# never been a "pure perl" fanatic anyway :-)
sub read_s {
    my $in;
    $in = `/bin/bash -c 'read -s foo; echo \$foo'`;
    chomp($in);
    print "\n";
    return $in;
}

sub dd {
    use Data::Dumper;
    for my $i (@_) {
        print STDERR "DBG: " . t_lap() . ": " . Dumper($i);
    }
}

sub ddh {
    dd [ unpack( "H*", +shift ) ];
}

{
    use Time::HiRes;
    my %start_times;

    sub t_start {
        my $name = shift || 'default';
        $start_times{$name} = [ Time::HiRes::gettimeofday() ];
    }

    sub t_lap {
        my $name = shift || 'default';
        return Time::HiRes::tv_interval( $start_times{$name} );
    }
}

