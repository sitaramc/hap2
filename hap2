#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;

# see README.mkd and TODO for more info

use MIME::Base64;
use Digest::SHA qw(sha256 sha256_base64 hmac_sha256 hmac_sha256_base64);

# ----------------------------------------------------------------------

my $N  = 1_000_000;                            # ROMix iterations
my $sl = "$ENV{HOME}/.config/hap2.sitelist";

# other non-parametrised settings:
# - SHA256 as H in ROMix
# - unpack("L") as "Integerify" in ROMix

# ----------------------------------------------------------------------

my %sd;
# get site details (user, salt, site, [check [len [suffix]]]) from sitelist file or ARGV
if (@ARGV >= 3) {
    %sd = ( user => $ARGV[0], salt => $ARGV[1], site => $ARGV[2], len => $ARGV[3] || 0 );
    @ARGV = ();
} else {
    # get site nickname from command line
    my $sn = shift;
    print_nicks() unless $sn;
    die "\nneed site nickname\n" unless $sn;

    %sd = read_sl($sn);
    die "could not find site with nickname '$sn'\n" unless $sd{site};
}

# create the internal salt, to be used in the hap2() function
my $ss = "$sd{user}+$sd{salt}\@$sd{site}";

print STDERR "\nmaster passphrase: ";
my $mp = read_s();
die "need master passphrase\n" unless $mp;

# print, xsel, etc...
show( hap2( $ss, $mp ) );

# ----------------------------------------------------------------------

sub hap2 {
    my ( $ss, $mp ) = @_;
    t_start();
    say STDERR "computing password for '$ss'";

    # convert to 256 bits :-)
    my $salt = sha256($ss);
    # everything is in 256 bits from now on

    # step 1 -- hmac with the master passphrase
    my $h1 = hmac_sha256( $salt, $mp );
    my $h2 = ROMix($h1);
    my $h3 = hmac_sha256_base64( $salt, $h2 );
    print STDERR t_lap() . "\n";

    # customise the return for specific site needs
    my $h4 = site_cust($h3);

    return $h4;
}

# ----------------------------------------------------------------------

sub ROMix {
    my $in = shift;
    my ( $X, $i, @V, $j );

    $V[0] = $in;
    for ( $i = 1; $i <= $N; $i++ ) {
        $V[$i] = sha256( $V[ $i - 1 ] );
    }
    $X = $V[$N];
    print STDERR t_lap() . "\n";

    for ( $i = 1; $i <= $N; $i++ ) {
        $j = unpack( "L", $X ) % $N;
        $X = sha256( $X ^ $V[$j] );
    }

    return $X;
}

sub site_cust {
    my $h = shift;
    # $h is about 43 characters, normally.  We may need to chop it down, or
    # add special characters, etc., based on site specific needs.

    my $check = sha256_base64($h);
    $check = substr($check, 0, 2) . substr($check, -2);
    if ( my $c = $sd{check} ) {
        die "FATAL: check value mismatch; possible wrong passphrase entered\n" if $c ne $check;
    } else {
        say STDERR "consider adding '$check' as the check value for this line";
    }

    # len
    $h = substr( $h, 0, $sd{len} ) if $sd{len};

    # finally, add suffix if one is specified
    $h .= $sd{suffix} if $sd{suffix};

    return $h;
}

# ----------------------------------------------------------------------

# service routines

sub read_sl {
    my $sn = shift;
    my %h;
    my @keys = qw( user salt site check len suffix );
    my @words;

    local @ARGV = ($sl);
    while (<>) {
        s/^\s+//; s/\s+$//; next unless /\S/;

        @words = split(' ', $_);
        next unless $words[0] eq $sn;

        shift @words;
        %h = map { $keys[$_] => $words[$_] } 0..5;
        # flush STDIN by continuing (we assume no duplicates)
    }

    return %h if %h;
    die "nick '$sn' not found\n";
}

# this is much better than fiddling with hard-to-use modules like
# Term::ReadLine or installing non-core modules like Term::ReadKey.  I've
# never been a "pure perl" fanatic anyway :-)
sub read_s {
    my $in;
    $in = `/bin/bash -c 'read -s foo; echo \$foo'`;
    chomp($in);
    print "\n";
    return $in;
}

sub show {
    my $sha = shift;
    say $sha;
}

sub dd {
    use Data::Dumper;
    for my $i (@_) {
        print STDERR "DBG: " . t_lap() . ": " . Dumper($i);
    }
}

sub ddh {
    dd [ unpack( "H*", +shift ) ];
}

{
    use Time::HiRes;
    my %start_times;

    sub t_start {
        my $name = shift || 'default';
        $start_times{$name} = [ Time::HiRes::gettimeofday() ];
    }

    sub t_lap {
        my $name = shift || 'default';
        return Time::HiRes::tv_interval( $start_times{$name} );
    }
}

sub print_nicks {
    local @ARGV = ($sl);

    while (<>) {
        print "\n$_" if /^# --/;
        next if /^\s*#/;
        print "$1, " if /^\s*([\w.-]+)/;
    }
    say "";
}
